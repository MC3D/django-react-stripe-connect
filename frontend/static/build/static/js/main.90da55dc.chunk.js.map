{"version":3,"sources":["serviceWorker.js","components/CourseList.js","components/CourseDetail.js","components/Authorize.js","index.js"],"names":["Boolean","window","location","hostname","match","axios","defaults","xsrfCookieName","xsrfHeaderName","CourseList","props","state","courses","get","then","res","setState","data","catch","error","console","log","this","map","course","Fragment","key","id","title","description","href","Component","CourseDetail","visible","handlePayment","bind","togglePaymentDisplay","params","slug","e","preventDefault","stripe","createToken","email","token","post","JSON","stringify","amount","course_id","status","price","type","onClick","injectStripe","Authorize","handleConnect","ReactDOM","render","apiKey","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90da55dc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass CourseList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      courses: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/api/v1/courses/')\n    .then(res => this.setState({courses: res.data}))\n    .catch(error => console.log(this.error));\n  }\n\n  render() {\n    let courses = this.state.courses.map(course => (\n      <React.Fragment key={course.id}>\n        <h4>{course.title}</h4>\n        <p>{course.description}</p>\n        <p><a href={`/courses/${course.id}/`}>Enroll</a></p>\n      </React.Fragment>\n    ));\n    return  (\n      <React.Fragment>\n        {courses}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default CourseList;\n","import React, {Component} from 'react';\nimport {CardElement, injectStripe} from 'react-stripe-elements';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n\nclass CourseDetail extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      visible: false\n    }\n\n    this.handlePayment = this.handlePayment.bind(this);\n    this.togglePaymentDisplay = this.togglePaymentDisplay.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(`/api/v1/courses/${this.props.match.params.slug}/`)\n    .then(res => this.setState(res.data))\n    .catch(error => console.log(this.error));\n  }\n\n  togglePaymentDisplay() {\n    this.setState(state => ({\n     visible: !state.visible\n   }));\n  }\n\n  async handlePayment(e) {\n    e.preventDefault();\n    let {token} = await this.props.stripe.createToken({email: \"buck@example.com\"});\n    let response = await axios.post(`/api/v1/courses/charge/`, JSON.stringify({\n      token: token.id,\n      email: token.email,\n      // 13900 equals 139.00 without * 100 added (decimal places)\n      amount: 13900 * 100,\n      description: 'course description',\n      course_id: '1',\n    }));\n\n    if(response.data.status === 'success') console.log(\"Purchase Complete!\");\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <h1>Purchase</h1>\n          <h4>You are buying:</h4>\n          <p>Course Title: <em>{this.state.title}</em></p>\n          <p>Amount: ${this.state.price}</p>\n          {this.state.visible && <React.Fragment><CardElement /><button type='buton' onClick={this.handlePayment}>Pay</button></React.Fragment>}\n        </div>\n        {!this.state.visible && <button type='button' onClick={this.togglePaymentDisplay}>Pay ${this.state.price} with Card</button>}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default injectStripe(CourseDetail);\n","import React, {Component} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass Authorize extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.handleConnect = this.handleConnect.bind(this);\n  }\n\n  handleConnect() {\n    axios(`/api/v1/accounts/authorize/`)\n    .then(res => console.log(res))\n    .catch(error => console.log(error));\n  }\n\n  render() {\n\n    return  (\n\n      <React.Fragment>\n        <h1>Django React Stripe Connect</h1>\n        <button type='button' onClick={this.handleConnect}>Connect Stripe Account</button>\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default Authorize;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Elements, StripeProvider} from 'react-stripe-elements';\n\nimport CourseList from './components/CourseList';\nimport CourseDetail from './components/CourseDetail';\nimport Authorize from './components/Authorize';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <StripeProvider apiKey=\"pk_test_4qASinaI2e8itlirCeBSidZx00NZ0Z9j8v\">\n    <Router>\n        <Switch>\n          <Route path='/authorize/' component={Authorize} />\n          <Route exact path='/courses/' component={CourseList} />\n          <Elements>\n            <Route path='/courses/:slug/' component={CourseDetail} />\n          </Elements>\n      </Switch>\n    </Router>\n  </StripeProvider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}